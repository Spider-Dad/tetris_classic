describe('Tetris', () => {
    let tetris;
    let mockCanvas;
    let mockCtx;
    let animationFrameCallback;

    beforeEach(() => {
        // –ú–æ–∫ –¥–ª—è requestAnimationFrame
        global.requestAnimationFrame = jest.fn(cb => {
            animationFrameCallback = cb;
            return 1; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º ID –∞–Ω–∏–º–∞—Ü–∏–∏
        });

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º DOM
        document.body.innerHTML = `
            <div class="game-container">
                <div class="game-area">
                    <div class="side-panel left-panel">
                        <div class="score-board">
                            <div class="score">–û—á–∫–∏: <span id="score">0</span></div>
                            <div class="level">–£—Ä–æ–≤–µ–Ω—å: <span id="level">1</span></div>
                            <div class="lines">–õ–∏–Ω–∏–∏: <span id="lines">0</span></div>
                        </div>
                        <div class="next-piece">
                            <h3>–°–ª–µ–¥—É—é—â–∞—è —Ñ–∏–≥—É—Ä–∞:</h3>
                            <canvas id="nextPiece"></canvas>
                        </div>
                    </div>
                    <canvas id="tetris"></canvas>
                    <div class="side-panel right-panel">
                        <div class="controls">
                            <button id="startBtn">–ù–∞—á–∞—Ç—å –∏–≥—Ä—É</button>
                            <button id="musicToggle">üéµ –ú—É–∑—ã–∫–∞</button>
                            <button id="soundToggle">üîä –ó–≤—É–∫</button>
                        </div>
                        <div class="controls-info">
                            <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</h3>
                        </div>
                    </div>
                </div>
                <div id="gameOver" class="hidden">
                    <div class="game-over-content">
                        <h2>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</h2>
                        <p>–í–∞—à —Å—á–µ—Ç: <span id="finalScore">0</span></p>
                        <button id="restartBtn">–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞</button>
                    </div>
                </div>
            </div>
        `;

        // –ú–æ–∫–∞–µ–º canvas context
        mockCtx = {
            fillStyle: '',
            strokeStyle: '',
            fillRect: jest.fn(),
            strokeRect: jest.fn(),
            clearRect: jest.fn()
        };

        mockCanvas = {
            getContext: jest.fn(() => mockCtx),
            width: 320,
            height: 640
        };

        // –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã canvas
        jest.spyOn(document, 'getElementById').mockImplementation((id) => {
            if (id === 'tetris' || id === 'nextPiece') {
                return mockCanvas;
            }
            return document.querySelector(`#${id}`);
        });

        // –ú–æ–∫ –¥–ª—è localStorage
        const localStorageMock = {
            getItem: jest.fn(),
            setItem: jest.fn(),
            clear: jest.fn()
        };
        global.localStorage = localStorageMock;

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Tetris –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
        jest.isolateModules(() => {
            // –ú–æ–∫ –¥–ª—è soundManager
            global.soundManager = {
                playSound: jest.fn(),
                startMusic: jest.fn(),
                stopMusic: jest.fn(),
                toggleMusic: jest.fn(),
                toggleSound: jest.fn()
            };
            
            const Tetris = require('../tetris.js').Tetris;
            tetris = new Tetris();
        });
    });

    afterEach(() => {
        // –û—á–∏—â–∞–µ–º –º–æ–∫–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
        jest.clearAllMocks();
        animationFrameCallback = null;
    });

    describe('constructor', () => {
        test('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏', () => {
            expect(tetris.BLOCK_SIZE).toBe(32);
            expect(tetris.BOARD_WIDTH).toBe(10);
            expect(tetris.BOARD_HEIGHT).toBe(20);
            expect(tetris.score).toBe(0);
            expect(tetris.lines).toBe(0);
            expect(tetris.level).toBe(1);
            expect(tetris.gameOver).toBe(false);
            expect(tetris.isPaused).toBe(false);
        });
    });

    describe('resetGame', () => {
        test('–¥–æ–ª–∂–µ–Ω —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏–≥—Ä—É –∫ –Ω–∞—á–∞–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º', () => {
            tetris.score = 100;
            tetris.lines = 5;
            tetris.level = 3;
            tetris.gameOver = true;
            tetris.isPaused = true;

            tetris.resetGame();

            expect(tetris.score).toBe(0);
            expect(tetris.lines).toBe(0);
            expect(tetris.level).toBe(1);
            expect(tetris.gameOver).toBe(false);
            expect(tetris.isPaused).toBe(false);
        });
    });

    describe('createNewPiece', () => {
        test('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—É—é —Ñ–∏–≥—É—Ä—É', () => {
            tetris.createNewPiece();
            expect(tetris.currentPiece).toBeDefined();
            expect(tetris.nextPiece).toBeDefined();
        });

        test('–¥–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å gameOver –ø—Ä–∏ –∫–æ–ª–ª–∏–∑–∏–∏', () => {
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤–µ—Ä—Ö–Ω—é—é —Å—Ç—Ä–æ–∫—É
            tetris.board[0] = Array(tetris.BOARD_WIDTH).fill(1);
            tetris.createNewPiece();
            expect(tetris.gameOver).toBe(true);
        });
    });

    describe('rotate', () => {
        test('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å —Ñ–∏–≥—É—Ä—É –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ', () => {
            const piece = {
                matrix: [
                    [1, 0],
                    [1, 1]
                ]
            };
            const rotated = tetris.rotate(piece, 1);
            expect(rotated).toEqual([
                [1, 1],
                [1, 0]
            ]);
        });

        test('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å —Ñ–∏–≥—É—Ä—É –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏', () => {
            const piece = {
                matrix: [
                    [1, 0],
                    [1, 1]
                ]
            };
            const rotated = tetris.rotate(piece, -1);
            expect(rotated).toEqual([
                [0, 1],
                [1, 1]
            ]);
        });
    });

    describe('checkCollision', () => {
        test('–¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∫–æ–ª–ª–∏–∑–∏—é —Å–æ —Å—Ç–µ–Ω–∞–º–∏', () => {
            const piece = {
                matrix: [[1]],
                pos: { x: -1, y: 0 }
            };
            expect(tetris.checkCollision(piece)).toBe(true);
        });

        test('–¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∫–æ–ª–ª–∏–∑–∏—é —Å –¥—Ä—É–≥–∏–º–∏ —Ñ–∏–≥—É—Ä–∞–º–∏', () => {
            tetris.board[19][0] = 1;
            const piece = {
                matrix: [[1]],
                pos: { x: 0, y: 19 }
            };
            expect(tetris.checkCollision(piece)).toBe(true);
        });
    });

    describe('merge', () => {
        beforeEach(() => {
            // –û—á–∏—â–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
            tetris.board = Array(tetris.BOARD_HEIGHT).fill().map(() => Array(tetris.BOARD_WIDTH).fill(0));
        });

        test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–π –±–ª–æ–∫ –Ω–∞ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ', () => {
            tetris.currentPiece = {
                matrix: [[1]],
                pos: { x: 0, y: 0 }
            };
            tetris.merge();
            expect(tetris.board[0][0]).toBe(1);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –æ—Å—Ç–∞–ª–∏—Å—å –ø—É—Å—Ç—ã–º–∏
            expect(tetris.board[0][1]).toBe(0);
            expect(tetris.board[1][0]).toBe(0);
        });

        test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–ª–æ–∂–Ω—É—é —Ñ–∏–≥—É—Ä—É –Ω–∞ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ', () => {
            tetris.currentPiece = {
                matrix: [
                    [1, 1],
                    [1, 1]
                ],
                pos: { x: 0, y: 0 }
            };
            tetris.merge();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —á–µ—Ç—ã—Ä–µ –∫–ª–µ—Ç–∫–∏ —Ñ–∏–≥—É—Ä—ã
            expect(tetris.board[0][0]).toBe(1);
            expect(tetris.board[0][1]).toBe(1);
            expect(tetris.board[1][0]).toBe(1);
            expect(tetris.board[1][1]).toBe(1);
        });

        test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∏–≥—É—Ä—É –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –ø–æ–ª—è', () => {
            tetris.currentPiece = {
                matrix: [[1]],
                pos: { x: 5, y: 5 }
            };
            tetris.merge();
            expect(tetris.board[5][5]).toBe(1);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –∫–ª–µ—Ç–∫–∏
            expect(tetris.board[5][4]).toBe(0);
            expect(tetris.board[5][6]).toBe(0);
            expect(tetris.board[4][5]).toBe(0);
            expect(tetris.board[6][5]).toBe(0);
        });

        test('–¥–æ–ª–∂–µ–Ω –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –≤ –º–∞—Ç—Ä–∏—Ü–µ —Ñ–∏–≥—É—Ä—ã', () => {
            tetris.currentPiece = {
                matrix: [
                    [0, 1],
                    [1, 0]
                ],
                pos: { x: 0, y: 0 }
            };
            tetris.merge();
            expect(tetris.board[0][0]).toBe(0);
            expect(tetris.board[0][1]).toBe(1);
            expect(tetris.board[1][0]).toBe(1);
            expect(tetris.board[1][1]).toBe(0);
        });
    });

    describe('clearLines', () => {
        test('–¥–æ–ª–∂–µ–Ω –æ—á–∏—â–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏', () => {
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∏–∂–Ω—é—é —Å—Ç—Ä–æ–∫—É
            tetris.board[19] = Array(tetris.BOARD_WIDTH).fill(1);
            tetris.clearLines();
            expect(tetris.lines).toBe(1);
            expect(tetris.board[19].every(cell => cell === 0)).toBe(true);
        });

        test('–¥–æ–ª–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—á–∏—Å–ª—è—Ç—å –æ—á–∫–∏', () => {
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —á–µ—Ç—ã—Ä–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¢–µ—Ç—Ä–∏—Å–∞
            for (let i = 16; i < 20; i++) {
                tetris.board[i] = Array(tetris.BOARD_WIDTH).fill(1);
            }
            tetris.clearLines();
            expect(tetris.score).toBe(1200); // –ó–∞ –¢–µ—Ç—Ä–∏—Å –Ω–∞ –ø–µ—Ä–≤–æ–º —É—Ä–æ–≤–Ω–µ
        });

        test('–¥–æ–ª–∂–µ–Ω –ø–æ–≤—ã—à–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∫–∞–∂–¥—ã–µ 10 –ª–∏–Ω–∏–π', () => {
            // –ó–∞–ø–æ–ª–Ω—è–µ–º 10 –ª–∏–Ω–∏–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
            for (let i = 10; i < 20; i++) {
                tetris.board[i] = Array(tetris.BOARD_WIDTH).fill(1);
            }
            tetris.clearLines();
            expect(tetris.level).toBe(2);
            expect(global.soundManager.playSound).toHaveBeenCalledWith('levelUp');
        });

        test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—á–∏—Å—Ç–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ª–∏–Ω–∏–π', () => {
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
            tetris.board[18] = Array(tetris.BOARD_WIDTH).fill(1);
            tetris.board[19] = Array(tetris.BOARD_WIDTH).fill(1);
            
            tetris.clearLines();
            
            expect(tetris.lines).toBe(2);
            expect(tetris.score).toBe(100); // 100 –æ—á–∫–æ–≤ –∑–∞ –¥–≤–µ –ª–∏–Ω–∏–∏ –Ω–∞ –ø–µ—Ä–≤–æ–º —É—Ä–æ–≤–Ω–µ
            expect(tetris.board[18].every(cell => cell === 0)).toBe(true);
            expect(tetris.board[19].every(cell => cell === 0)).toBe(true);
        });
        
        test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—á–∏—Å—Ç–∫—É —Ç—Ä–µ—Ö –ª–∏–Ω–∏–π', () => {
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏
            tetris.board[17] = Array(tetris.BOARD_WIDTH).fill(1);
            tetris.board[18] = Array(tetris.BOARD_WIDTH).fill(1);
            tetris.board[19] = Array(tetris.BOARD_WIDTH).fill(1);
            
            tetris.clearLines();
            
            expect(tetris.lines).toBe(3);
            expect(tetris.score).toBe(300); // 300 –æ—á–∫–æ–≤ –∑–∞ —Ç—Ä–∏ –ª–∏–Ω–∏–∏ –Ω–∞ –ø–µ—Ä–≤–æ–º —É—Ä–æ–≤–Ω–µ
        });
        
        test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–µ –ª–∏–Ω–∏–∏', () => {
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ–¥–Ω–æ–π –ø—É—Å—Ç–æ–π –∫–ª–µ—Ç–∫–æ–π
            tetris.board[19] = Array(tetris.BOARD_WIDTH).fill(1);
            tetris.board[19][0] = 0;
            
            tetris.clearLines();
            
            expect(tetris.lines).toBe(0); // –õ–∏–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—á–∏—â–µ–Ω–∞
            expect(tetris.score).toBe(0);
            expect(tetris.board[19][1]).toBe(1); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ª–∏–Ω–∏—è –æ—Å—Ç–∞–ª–∞—Å—å
        });

        test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏ –∞–Ω–∏–º–∞—Ü–∏—é', () => {
            // –ú–æ–∫–∞–µ–º setTimeout
            jest.useFakeTimers();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            tetris.lines = 9;
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
            tetris.board[19] = Array(tetris.BOARD_WIDTH).fill(1);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
            document.querySelector('.level').classList.add = jest.fn();
            document.querySelector('.level').classList.remove = jest.fn();
            
            tetris.clearLines();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—Å–∏–ª—Å—è
            expect(tetris.level).toBe(2);
            expect(tetris.lines).toBe(10);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è
            expect(document.querySelector('.level').classList.add).toHaveBeenCalledWith('level-up');
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
            jest.runAllTimers();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å –±—ã–ª —É–¥–∞–ª–µ–Ω
            expect(document.querySelector('.level').classList.remove).toHaveBeenCalledWith('level-up');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
            jest.useRealTimers();
        });
        
        test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—á–∏—Å—Ç–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ª–∏–Ω–∏–π —Å —Ä–∞–∑–Ω—ã–º–∏ –æ—á–∫–∞–º–∏', () => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—á–∏—Å—Ç–∫–∏ –ª–∏–Ω–∏–π –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤
            const testCases = [
                { lines: 1, expectedScore: 40 },
                { lines: 2, expectedScore: 100 },
                { lines: 3, expectedScore: 300 },
                { lines: 4, expectedScore: 1200 }
            ];
            
            for (const testCase of testCases) {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                tetris.score = 0;
                tetris.lines = 0;
                tetris.level = 1;
                tetris.board = Array(tetris.BOARD_HEIGHT).fill().map(() => Array(tetris.BOARD_WIDTH).fill(0));
                
                // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
                for (let i = tetris.BOARD_HEIGHT - testCase.lines; i < tetris.BOARD_HEIGHT; i++) {
                    tetris.board[i] = Array(tetris.BOARD_WIDTH).fill(1);
                }
                
                tetris.clearLines();
                
                expect(tetris.lines).toBe(testCase.lines);
                expect(tetris.score).toBe(testCase.expectedScore);
            }
        });
    });

    describe('handleKeyPress', () => {
        test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ', () => {
            tetris.currentPiece = {
                matrix: [[1]],
                pos: { x: 1, y: 0 }
            };
            tetris.handleKeyPress({ code: 'ArrowLeft' });
            expect(tetris.currentPiece.pos.x).toBe(0);
        });

        test('–Ω–µ –¥–æ–ª–∂–µ–Ω –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ª–µ–≤–æ –ø—Ä–∏ –∫–æ–ª–ª–∏–∑–∏–∏', () => {
            tetris.currentPiece = {
                matrix: [[1]],
                pos: { x: 0, y: 0 }
            };
            
            // –ú–æ–∫–∞–µ–º checkCollision, —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª true (–µ—Å—Ç—å –∫–æ–ª–ª–∏–∑–∏—è)
            jest.spyOn(tetris, 'checkCollision').mockReturnValue(true);
            
            tetris.handleKeyPress({ code: 'ArrowLeft' });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            expect(tetris.currentPiece.pos.x).toBe(0);
            expect(global.soundManager.playSound).not.toHaveBeenCalled();
        });

        test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø—Ä–∞–≤–æ', () => {
            tetris.currentPiece = {
                matrix: [[1]],
                pos: { x: 0, y: 0 }
            };
            tetris.handleKeyPress({ code: 'ArrowRight' });
            expect(tetris.currentPiece.pos.x).toBe(1);
        });

        test('–Ω–µ –¥–æ–ª–∂–µ–Ω –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø—Ä–∞–≤–æ –ø—Ä–∏ –∫–æ–ª–ª–∏–∑–∏–∏', () => {
            tetris.currentPiece = {
                matrix: [[1]],
                pos: { x: 9, y: 0 }
            };
            
            // –ú–æ–∫–∞–µ–º checkCollision, —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª true (–µ—Å—Ç—å –∫–æ–ª–ª–∏–∑–∏—è)
            jest.spyOn(tetris, 'checkCollision').mockReturnValue(true);
            
            tetris.handleKeyPress({ code: 'ArrowRight' });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            expect(tetris.currentPiece.pos.x).toBe(9);
            expect(global.soundManager.playSound).not.toHaveBeenCalled();
        });

        test('–Ω–µ –¥–æ–ª–∂–µ–Ω –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–Ω–∏–∑ –ø—Ä–∏ –∫–æ–ª–ª–∏–∑–∏–∏', () => {
            tetris.currentPiece = {
                matrix: [[1]],
                pos: { x: 0, y: 19 }
            };
            
            // –ú–æ–∫–∞–µ–º checkCollision, —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª true (–µ—Å—Ç—å –∫–æ–ª–ª–∏–∑–∏—è)
            jest.spyOn(tetris, 'checkCollision').mockReturnValue(true);
            
            tetris.handleKeyPress({ code: 'ArrowDown' });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            expect(tetris.currentPiece.pos.y).toBe(19);
            expect(global.soundManager.playSound).not.toHaveBeenCalled();
        });

        test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–≤–æ—Ä–æ—Ç', () => {
            const spy = jest.spyOn(tetris, 'rotate');
            tetris.handleKeyPress({ code: 'ArrowUp' });
            expect(spy).toHaveBeenCalled();
        });

        test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ', () => {
            tetris.currentPiece = {
                matrix: [[1]],
                pos: { x: 0, y: 0 }
            };
            tetris.handleKeyPress({ code: 'Space' });
            expect(tetris.currentPiece.pos.y).toBeGreaterThan(0);
        });

        test('–¥–æ–ª–∂–µ–Ω –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –∑–≤—É–∫ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏', () => {
            tetris.currentPiece = {
                matrix: [[1]],
                pos: { x: 1, y: 0 }
            };
            tetris.handleKeyPress({ code: 'ArrowLeft' });
            expect(global.soundManager.playSound).toHaveBeenCalledWith('move');
        });

        test('–¥–æ–ª–∂–µ–Ω –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –∑–≤—É–∫ –ø—Ä–∏ –ø–æ–≤–æ—Ä–æ—Ç–µ', () => {
            tetris.currentPiece = {
                matrix: [
                    [1, 0],
                    [1, 1]
                ],
                pos: { x: 5, y: 5 }
            };
            tetris.handleKeyPress({ code: 'ArrowUp' });
            expect(global.soundManager.playSound).toHaveBeenCalledWith('rotate');
        });

        test('–¥–æ–ª–∂–µ–Ω –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –∑–≤—É–∫ –ø—Ä–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–º –ø–∞–¥–µ–Ω–∏–∏', () => {
            tetris.currentPiece = {
                matrix: [[1]],
                pos: { x: 0, y: 0 }
            };
            tetris.handleKeyPress({ code: 'Space' });
            expect(global.soundManager.playSound).toHaveBeenCalledWith('drop');
        });

        test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–ª–∞–≤–∏—à—É Enter –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–∞—É–∑—ã', () => {
            // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –∏–≥—Ä–∞ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ
            tetris.isPaused = false;
            
            // –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ togglePause
            const togglePauseSpy = jest.spyOn(tetris, 'togglePause').mockImplementation(() => {});
            
            // –ù–∞–∂–∏–º–∞–µ–º Enter
            tetris.handleKeyPress({ code: 'Enter' });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ togglePause –±—ã–ª –≤—ã–∑–≤–∞–Ω
            expect(togglePauseSpy).toHaveBeenCalled();
        });
        
        test('–Ω–µ –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª–∞–≤–∏—à–∏ –≤–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã', () => {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—É–∑—ã
            tetris.isPaused = true;
            
            // –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –≤—ã–∑—ã–≤–∞—Ç—å—Å—è
            const checkCollisionSpy = jest.spyOn(tetris, 'checkCollision');
            const updateGhostPieceSpy = jest.spyOn(tetris, 'updateGhostPiece').mockImplementation(() => {});
            
            // –ù–∞–∂–∏–º–∞–µ–º –∫–ª–∞–≤–∏—à–∏ –¥–≤–∏–∂–µ–Ω–∏—è
            tetris.handleKeyPress({ code: 'ArrowLeft' });
            tetris.handleKeyPress({ code: 'ArrowRight' });
            tetris.handleKeyPress({ code: 'ArrowDown' });
            tetris.handleKeyPress({ code: 'ArrowUp' });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥—ã –Ω–µ –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã
            expect(checkCollisionSpy).not.toHaveBeenCalled();
            expect(updateGhostPieceSpy).not.toHaveBeenCalled();
            expect(global.soundManager.playSound).not.toHaveBeenCalled();
        });
        
        test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–ª–∞–≤–∏—à–∏ Numpad', () => {
            tetris.currentPiece = {
                matrix: [[1]],
                pos: { x: 1, y: 0 }
            };
            
            // Numpad4 (–≤–ª–µ–≤–æ)
            tetris.handleKeyPress({ code: 'Numpad4' });
            expect(tetris.currentPiece.pos.x).toBe(0);
            
            // Numpad6 (–≤–ø—Ä–∞–≤–æ)
            tetris.currentPiece.pos.x = 1;
            tetris.handleKeyPress({ code: 'Numpad6' });
            expect(tetris.currentPiece.pos.x).toBe(2);
            
            // Numpad2 (–≤–Ω–∏–∑)
            tetris.handleKeyPress({ code: 'Numpad2' });
            expect(tetris.currentPiece.pos.y).toBe(1);
            
            // Numpad8 (–ø–æ–≤–æ—Ä–æ—Ç)
            const spy = jest.spyOn(tetris, 'rotate');
            tetris.handleKeyPress({ code: 'Numpad8' });
            expect(spy).toHaveBeenCalled();
        });
        
        test('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Å–º–µ—â–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–≤–æ—Ä–æ—Ç–µ —Å –∫–æ–ª–ª–∏–∑–∏–µ–π', () => {
            tetris.currentPiece = {
                matrix: [[1]],
                pos: { x: 0, y: 0 }
            };
            
            // –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ rotate
            const rotatedMatrix = [[1]];
            const rotateSpy = jest.spyOn(tetris, 'rotate').mockReturnValue(rotatedMatrix);
            
            // –ú–æ–∫–∞–µ–º checkCollision, —á—Ç–æ–±—ã –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–ª true (–µ—Å—Ç—å –∫–æ–ª–ª–∏–∑–∏—è) –¥–ª—è –ø–µ—Ä–≤—ã—Ö –≤—ã–∑–æ–≤–æ–≤
            // –∏ false (–Ω–µ—Ç –∫–æ–ª–ª–∏–∑–∏–∏) —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–º–µ—â–µ–Ω–∏–π
            const checkCollisionSpy = jest.spyOn(tetris, 'checkCollision');
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∫–æ–ª–ª–∏–∑–∏–π –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö —Å–º–µ—â–µ–Ω–∏—è—Ö
            // –ü–µ—Ä–≤—ã–µ 3 –≤—ã–∑–æ–≤–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç true (–µ—Å—Ç—å –∫–æ–ª–ª–∏–∑–∏—è)
            // 4-–π –≤—ã–∑–æ–≤ (—Å–º–µ—â–µ–Ω–∏–µ 0, -1) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false (–Ω–µ—Ç –∫–æ–ª–ª–∏–∑–∏–∏)
            checkCollisionSpy
                .mockReturnValueOnce(true)   // –±–µ–∑ —Å–º–µ—â–µ–Ω–∏—è
                .mockReturnValueOnce(true)   // —Å–º–µ—â–µ–Ω–∏–µ (1, 0)
                .mockReturnValueOnce(true)   // —Å–º–µ—â–µ–Ω–∏–µ (-1, 0)
                .mockReturnValueOnce(false)  // —Å–º–µ—â–µ–Ω–∏–µ (0, -1) - –Ω–µ—Ç –∫–æ–ª–ª–∏–∑–∏–∏
                .mockReturnValue(true);      // –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
            
            // –ú–æ–∫–∞–µ–º updateGhostPiece, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–ª–∏–∑–∏–π
            jest.spyOn(tetris, 'updateGhostPiece').mockImplementation(() => {});
            
            // –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Ñ–∏–≥—É—Ä—É
            tetris.handleKeyPress({ code: 'ArrowUp' });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ rotate –±—ã–ª –≤—ã–∑–≤–∞–Ω
            expect(rotateSpy).toHaveBeenCalled();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–≤–æ—Ä–æ—Ç –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º (0, -1)
            expect(tetris.currentPiece.pos.y).toBe(-1);
            expect(tetris.currentPiece.matrix).toEqual(rotatedMatrix);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–≤—É–∫ –±—ã–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω
            expect(global.soundManager.playSound).toHaveBeenCalledWith('rotate');
        });

        test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–º–µ—â–µ–Ω–∏–π –ø—Ä–∏ –ø–æ–≤–æ—Ä–æ—Ç–µ', () => {
            tetris.currentPiece = {
                matrix: [[1]],
                pos: { x: 0, y: 0 }
            };
            
            // –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ rotate
            jest.spyOn(tetris, 'rotate').mockImplementation(() => [[1]]);
            
            // –ú–æ–∫–∞–µ–º checkCollision
            const checkCollisionSpy = jest.spyOn(tetris, 'checkCollision').mockReturnValue(true);
            
            tetris.handleKeyPress({ code: 'ArrowUp' });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ checkCollision –±—ã–ª –≤—ã–∑–≤–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑
            expect(checkCollisionSpy).toHaveBeenCalled();
        });
        
        test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –Ω–∏ –æ–¥–Ω–æ —Å–º–µ—â–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –ø–æ–≤–æ—Ä–æ—Ç–µ', () => {
            tetris.currentPiece = {
                matrix: [[1]],
                pos: { x: 0, y: 0 }
            };
            
            // –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ rotate
            const originalMatrix = [[1]];
            const rotatedMatrix = [[1, 1]];
            jest.spyOn(tetris, 'rotate').mockReturnValue(rotatedMatrix);
            
            // –ú–æ–∫–∞–µ–º checkCollision, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å true (–∫–æ–ª–ª–∏–∑–∏—è)
            jest.spyOn(tetris, 'checkCollision').mockReturnValue(true);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
            tetris.currentPiece.matrix = [...originalMatrix];
            
            tetris.handleKeyPress({ code: 'ArrowUp' });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Ç—Ä–∏—Ü–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞ –Ω–µ —É–¥–∞–ª–∏—Å—å
            expect(tetris.currentPiece.matrix).toEqual(originalMatrix);
            expect(global.soundManager.playSound).not.toHaveBeenCalledWith('rotate');
        });

        test('–Ω–µ –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–ª–∞–≤–∏—à–∏ –ø—Ä–∏ gameOver', () => {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º gameOver
            tetris.gameOver = true;
            
            // –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –≤—ã–∑—ã–≤–∞—Ç—å—Å—è
            const checkCollisionSpy = jest.spyOn(tetris, 'checkCollision');
            const togglePauseSpy = jest.spyOn(tetris, 'togglePause');
            
            // –ù–∞–∂–∏–º–∞–µ–º —Ä–∞–∑–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏
            tetris.handleKeyPress({ code: 'ArrowLeft' });
            tetris.handleKeyPress({ code: 'ArrowRight' });
            tetris.handleKeyPress({ code: 'ArrowDown' });
            tetris.handleKeyPress({ code: 'ArrowUp' });
            tetris.handleKeyPress({ code: 'Space' });
            tetris.handleKeyPress({ code: 'Enter' });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥—ã –Ω–µ –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã
            expect(checkCollisionSpy).not.toHaveBeenCalled();
            expect(togglePauseSpy).not.toHaveBeenCalled();
            expect(global.soundManager.playSound).not.toHaveBeenCalled();
        });
    });

    describe('togglePause', () => {
        test('–¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—É–∑—ã', () => {
            expect(tetris.isPaused).toBe(false);
            tetris.togglePause();
            expect(tetris.isPaused).toBe(true);
            tetris.togglePause();
            expect(tetris.isPaused).toBe(false);
        });

        test('–¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å –ø–∞—É–∑—ã', () => {
            // –ú–æ–∫–∞–µ–º requestAnimationFrame
            const requestAnimationFrameSpy = jest.spyOn(global, 'requestAnimationFrame');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—É–∑—É
            tetris.isPaused = true;
            
            // –°–Ω–∏–º–∞–µ–º —Å –ø–∞—É–∑—ã
            tetris.togglePause();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ requestAnimationFrame –±—ã–ª –≤—ã–∑–≤–∞–Ω
            expect(requestAnimationFrameSpy).toHaveBeenCalled();
            expect(tetris.lastTime).not.toBe(0);
        });
    });

    describe('animate', () => {
        test('–Ω–µ –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å –∏–≥—Ä—É, –µ—Å–ª–∏ gameOver', () => {
            // –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ update
            const updateSpy = jest.spyOn(tetris, 'update').mockImplementation(() => {});
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º gameOver
            tetris.gameOver = true;
            
            // –í—ã–∑—ã–≤–∞–µ–º animate
            tetris.animate(1000);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ update –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω
            expect(updateSpy).not.toHaveBeenCalled();
        });
        
        test('–Ω–µ –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å –∏–≥—Ä—É, –µ—Å–ª–∏ isPaused', () => {
            // –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ update
            const updateSpy = jest.spyOn(tetris, 'update').mockImplementation(() => {});
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—É–∑—É
            tetris.isPaused = true;
            
            // –í—ã–∑—ã–≤–∞–µ–º animate
            tetris.animate(1000);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ update –Ω–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω
            expect(updateSpy).not.toHaveBeenCalled();
        });
        
        test('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å –∏–≥—Ä—É, –µ—Å–ª–∏ –Ω–µ gameOver –∏ –Ω–µ isPaused', () => {
            // –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥ update
            const updateSpy = jest.spyOn(tetris, 'update').mockImplementation(() => {});
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            tetris.gameOver = false;
            tetris.isPaused = false;
            tetris.lastTime = 900;
            
            // –í—ã–∑—ã–≤–∞–µ–º animate
            tetris.animate(1000);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ update –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º deltaTime
            expect(updateSpy).toHaveBeenCalledWith(100);
            expect(tetris.lastTime).toBe(1000);
        });

        test('–¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å –º–µ—Ç–æ–¥ draw –ø—Ä–∏ –∞–Ω–∏–º–∞—Ü–∏–∏', () => {
            // –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã
            const updateSpy = jest.spyOn(tetris, 'update').mockImplementation(() => {});
            const drawSpy = jest.spyOn(tetris, 'draw').mockImplementation(() => {});
            const requestAnimationFrameSpy = jest.spyOn(global, 'requestAnimationFrame');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            tetris.gameOver = false;
            tetris.isPaused = false;
            tetris.lastTime = 900;
            
            // –í—ã–∑—ã–≤–∞–µ–º animate
            tetris.animate(1000);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥—ã –±—ã–ª–∏ –≤—ã–∑–≤–∞–Ω—ã
            expect(updateSpy).toHaveBeenCalled();
            expect(drawSpy).toHaveBeenCalled();
            expect(requestAnimationFrameSpy).toHaveBeenCalled();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –¥–ª—è requestAnimationFrame - —ç—Ç–æ –º–µ—Ç–æ–¥ animate
            const callback = requestAnimationFrameSpy.mock.calls[0][0];
            expect(callback.name).toBe('bound animate');
        });
    });

    describe('update', () => {
        test('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å –ø–æ–∑–∏—Ü–∏—é —Ñ–∏–≥—É—Ä—ã', () => {
            tetris.currentPiece = {
                matrix: [[1]],
                pos: { x: 0, y: 0 }
            };
            tetris.dropCounter = 0;
            tetris.dropInterval = 500;
            tetris.update(1000);
            expect(tetris.currentPiece.pos.y).toBe(1);
        });

        test('–¥–æ–ª–∂–µ–Ω —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å dropCounter –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏', () => {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            tetris.dropCounter = 0;
            tetris.dropInterval = 1000;
            
            // –í—ã–∑—ã–≤–∞–µ–º update —Å deltaTime –º–µ–Ω—å—à–µ dropInterval
            tetris.update(500);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ dropCounter —É–≤–µ–ª–∏—á–∏–ª—Å—è, –Ω–æ –Ω–µ –¥–æ—Å—Ç–∏–≥ dropInterval
            expect(tetris.dropCounter).toBe(500);
            
            // –í—ã–∑—ã–≤–∞–µ–º update –µ—â–µ —Ä–∞–∑
            tetris.update(400);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ dropCounter —É–≤–µ–ª–∏—á–∏–ª—Å—è, –Ω–æ –≤—Å–µ –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∏–≥ dropInterval
            expect(tetris.dropCounter).toBe(900);
        });

        test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Ñ–∏–≥—É—Ä—ã –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –¥–Ω–∞', () => {
            tetris.currentPiece = {
                matrix: [[1]],
                pos: { x: 0, y: 18 } // –ü–æ—á—Ç–∏ —É –¥–Ω–∞
            };
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–ª–µ—Ç–∫—É –ø–æ–¥ —Ñ–∏–≥—É—Ä–æ–π
            tetris.board[19][0] = 1;
            
            // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            tetris.dropCounter = tetris.dropInterval;
            tetris.update(100);
            expect(tetris.lockCounter).toBe(100);
            
            // –í—Ç–æ—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è
            const mergeSpy = jest.spyOn(tetris, 'merge');
            const clearLinesSpy = jest.spyOn(tetris, 'clearLines');
            const createNewPieceSpy = jest.spyOn(tetris, 'createNewPiece');
            
            tetris.lockCounter = tetris.lockDelay - 100;
            tetris.update(100);
            
            expect(mergeSpy).toHaveBeenCalled();
            expect(clearLinesSpy).toHaveBeenCalled();
            expect(createNewPieceSpy).toHaveBeenCalled();
            expect(tetris.lockCounter).toBe(0);
        });

        test('–¥–æ–ª–∂–µ–Ω —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –≤–Ω–∏–∑', () => {
            tetris.currentPiece = {
                matrix: [[1]],
                pos: { x: 0, y: 0 }
            };
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            tetris.lockCounter = 500;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –≤–Ω–∏–∑
            tetris.dropCounter = tetris.dropInterval;
            tetris.update(1000);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—á–µ—Ç—á–∏–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–±—Ä–æ—à–µ–Ω
            expect(tetris.lockCounter).toBe(0);
            expect(tetris.currentPiece.pos.y).toBe(1);
        });
    });

    describe('draw', () => {
        beforeEach(() => {
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–∫–æ–≤ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
            mockCtx.fillRect.mockClear();
            mockCtx.strokeRect.mockClear();
            mockCtx.fillStyle = '';
        });

        test('–¥–æ–ª–∂–µ–Ω –æ—á–∏—â–∞—Ç—å —Ö–æ–ª—Å—Ç –ø–µ—Ä–µ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π', () => {
            tetris.draw();
            expect(mockCtx.fillRect).toHaveBeenCalledWith(0, 0, tetris.canvas.width, tetris.canvas.height);
        });

        test('–¥–æ–ª–∂–µ–Ω –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å –±–ª–æ–∫–∏ –Ω–∞ –∏–≥—Ä–æ–≤–æ–º –ø–æ–ª–µ', () => {
            tetris.board[0][0] = 1; // –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –≤ –≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
            tetris.draw();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É –±–ª–æ–∫–∞
            expect(mockCtx.fillRect).toHaveBeenCalledWith(
                0 * tetris.BLOCK_SIZE,
                0 * tetris.BLOCK_SIZE,
                tetris.BLOCK_SIZE,
                tetris.BLOCK_SIZE
            );
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É –≥—Ä–∞–Ω–∏—Ü—ã –±–ª–æ–∫–∞
            expect(mockCtx.strokeRect).toHaveBeenCalledWith(
                0 * tetris.BLOCK_SIZE,
                0 * tetris.BLOCK_SIZE,
                tetris.BLOCK_SIZE,
                tetris.BLOCK_SIZE
            );
        });

        test('–¥–æ–ª–∂–µ–Ω –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ñ–∏–≥—É—Ä—É', () => {
            tetris.currentPiece = {
                matrix: [[1]],
                pos: { x: 1, y: 1 }
            };
            tetris.draw();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É –±–ª–æ–∫–∞ —Ç–µ–∫—É—â–µ–π —Ñ–∏–≥—É—Ä—ã
            expect(mockCtx.fillRect).toHaveBeenCalledWith(
                1 * tetris.BLOCK_SIZE,
                1 * tetris.BLOCK_SIZE,
                tetris.BLOCK_SIZE,
                tetris.BLOCK_SIZE
            );
        });

        test('–¥–æ–ª–∂–µ–Ω –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å –ø—Ä–∏–∑—Ä–∞—á–Ω—É—é —Ñ–∏–≥—É—Ä—É', () => {
            tetris.currentPiece = {
                matrix: [[1]],
                pos: { x: 1, y: 1 }
            };
            tetris.updateGhostPiece();
            tetris.draw();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–π —Ñ–∏–≥—É—Ä—ã
            const ghostCalls = mockCtx.fillRect.mock.calls.filter(call => 
                call[0] === 1 * tetris.BLOCK_SIZE && 
                call[1] === tetris.ghostPiece.pos.y * tetris.BLOCK_SIZE
            );
            expect(ghostCalls.length).toBeGreaterThan(0);
        });

        test('–¥–æ–ª–∂–µ–Ω –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Ñ–∏–≥—É—Ä—É', () => {
            tetris.nextPiece = {
                matrix: [[1]]
            };
            tetris.draw();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–∏—Å—Ç–∫—É —Ö–æ–ª—Å—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∏–≥—É—Ä—ã
            expect(mockCtx.fillRect).toHaveBeenCalledWith(
                0,
                0,
                tetris.nextCanvas.width,
                tetris.nextCanvas.height
            );

            // –°–ª–µ–¥—É—é—â–∞—è —Ñ–∏–≥—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞
            const offsetX = (tetris.nextCanvas.width / tetris.BLOCK_SIZE - tetris.nextPiece.matrix[0].length) / 2;
            const offsetY = (tetris.nextCanvas.height / tetris.BLOCK_SIZE - tetris.nextPiece.matrix.length) / 2;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∏–≥—É—Ä—ã
            const nextPieceCalls = mockCtx.fillRect.mock.calls.filter(call => 
                call[0] === (offsetX + 0) * tetris.BLOCK_SIZE && 
                call[1] === (offsetY + 0) * tetris.BLOCK_SIZE
            );
            expect(nextPieceCalls.length).toBeGreaterThan(0);
        });

        test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å –ø—É—Å—Ç–æ–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ', () => {
            // –û—á–∏—â–∞–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
            tetris.board = Array(tetris.BOARD_HEIGHT).fill().map(() => Array(tetris.BOARD_WIDTH).fill(0));
            tetris.currentPiece = null;
            tetris.nextPiece = null;
            tetris.ghostPiece = null;
            
            tetris.draw();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏ —Ö–æ–ª—Å—Ç–∞
            expect(mockCtx.fillRect).toHaveBeenCalledWith(0, 0, tetris.canvas.width, tetris.canvas.height);
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –≤—ã–∑–æ–≤—ã fillRect, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –≤—ã–∑–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ö–æ–ª—Å—Ç–∞
            const fillRectCalls = mockCtx.fillRect.mock.calls.filter(call => 
                !(call[0] === 0 && call[1] === 0 && 
                  call[2] === tetris.canvas.width && call[3] === tetris.canvas.height)
            );
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –±—ã–ª–æ –¥—Ä—É–≥–∏—Ö –≤—ã–∑–æ–≤–æ–≤ fillRect –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –±–ª–æ–∫–æ–≤
            expect(fillRectCalls.length).toBe(0);
        });

        test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å –ø—Ä–∏–∑—Ä–∞—á–Ω—É—é —Ñ–∏–≥—É—Ä—É —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é', () => {
            tetris.currentPiece = {
                matrix: [[1]],
                pos: { x: 1, y: 1 }
            };
            tetris.updateGhostPiece();
            
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤—ã–∑–æ–≤—ã
            mockCtx.fillRect.mockClear();
            
            tetris.draw();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–∑—Ä–∞—á–Ω–∞—è —Ñ–∏–≥—É—Ä–∞ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω–∞
            const ghostCalls = mockCtx.fillRect.mock.calls.filter(call => 
                call[0] === 1 * tetris.BLOCK_SIZE && 
                call[1] === tetris.ghostPiece.pos.y * tetris.BLOCK_SIZE
            );
            expect(ghostCalls.length).toBeGreaterThan(0);
        });
    });

    describe('start', () => {
        test('–¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å –º—É–∑—ã–∫—É –∏ –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ', () => {
            tetris.gameOver = false;
            tetris.start();
            expect(global.soundManager.startMusic).toHaveBeenCalled();
            expect(global.requestAnimationFrame).toHaveBeenCalled();
        });

        test('–Ω–µ –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–≥—Ä—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ gameOver', () => {
            tetris.gameOver = true;
            tetris.start();
            expect(global.soundManager.startMusic).not.toHaveBeenCalled();
            expect(global.requestAnimationFrame).not.toHaveBeenCalled();
        });
    });

    describe('module.exports', () => {
        test('–¥–æ–ª–∂–µ–Ω —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å Tetris –∏ —ç–∫–∑–µ–º–ø–ª—è—Ä game', () => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥—É–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            const tetrisModule = require('../tetris.js');
            expect(tetrisModule.Tetris).toBeDefined();
            expect(tetrisModule.game).toBeDefined();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ game —è–≤–ª—è–µ—Ç—Å—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º Tetris
            expect(tetrisModule.game instanceof tetrisModule.Tetris).toBe(true);
        });
    });

    describe('initializeControls', () => {
        test('–¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–ª—è—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫', () => {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –º–æ–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
            const startBtn = document.createElement('button');
            startBtn.id = 'startBtn';
            
            const restartBtn = document.createElement('button');
            restartBtn.id = 'restartBtn';
            
            const musicToggle = document.createElement('button');
            musicToggle.id = 'musicToggle';
            musicToggle.textContent = 'üéµ –ú—É–∑—ã–∫–∞';
            
            const soundToggle = document.createElement('button');
            soundToggle.id = 'soundToggle';
            soundToggle.textContent = 'üîä –ó–≤—É–∫';
            
            // –ó–∞–º–µ–Ω—è–µ–º getElementById –¥–ª—è –Ω–∞—à–∏—Ö –∫–Ω–æ–ø–æ–∫
            document.getElementById = jest.fn((id) => {
                if (id === 'startBtn') return startBtn;
                if (id === 'restartBtn') return restartBtn;
                if (id === 'musicToggle') return musicToggle;
                if (id === 'soundToggle') return soundToggle;
                if (id === 'tetris' || id === 'nextPiece') return mockCanvas;
                return document.querySelector(`#${id}`);
            });
            
            // –ú–æ–∫–∞–µ–º –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–∑–≤–∞–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
            const resetGameSpy = jest.spyOn(tetris, 'resetGame').mockImplementation(() => {});
            const startSpy = jest.spyOn(tetris, 'start').mockImplementation(() => {});
            
            // –ó–∞–Ω–æ–≤–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã
            tetris.initializeControls();
            
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞–º
            startBtn.click();
            expect(resetGameSpy).toHaveBeenCalled();
            expect(startSpy).toHaveBeenCalled();
            
            resetGameSpy.mockClear();
            startSpy.mockClear();
            
            restartBtn.click();
            expect(resetGameSpy).toHaveBeenCalled();
            expect(startSpy).toHaveBeenCalled();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º—É–∑—ã–∫–∏
            global.soundManager.toggleMusic.mockReturnValueOnce(true);
            musicToggle.click();
            expect(global.soundManager.toggleMusic).toHaveBeenCalled();
            expect(musicToggle.textContent).toBe('üîá –ú—É–∑—ã–∫–∞');
            
            global.soundManager.toggleMusic.mockReturnValueOnce(false);
            musicToggle.click();
            expect(musicToggle.textContent).toBe('üéµ –ú—É–∑—ã–∫–∞');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞
            global.soundManager.toggleSound.mockReturnValueOnce(true);
            soundToggle.click();
            expect(global.soundManager.toggleSound).toHaveBeenCalled();
            expect(soundToggle.textContent).toBe('üîá –ó–≤—É–∫');
            
            global.soundManager.toggleSound.mockReturnValueOnce(false);
            soundToggle.click();
            expect(soundToggle.textContent).toBe('üîä –ó–≤—É–∫');
        });
        
        test('–¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–±–µ–ª–∞ –∏ Enter', () => {
            // –°–æ–∑–¥–∞–µ–º –º–æ–∫ –¥–ª—è addEventListener
            const addEventListenerMock = jest.fn();
            document.addEventListener = addEventListenerMock;
            
            // –ó–∞–Ω–æ–≤–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã
            tetris.initializeControls();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ addEventListener –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å 'keydown'
            expect(addEventListenerMock).toHaveBeenCalledWith('keydown', expect.any(Function));
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ keydown
            const keydownHandler = addEventListenerMock.mock.calls.find(
                call => call[0] === 'keydown'
            )[1];
            
            // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è keydown —Å —Ñ—É–Ω–∫—Ü–∏–µ–π preventDefault
            const spaceEvent = {
                code: 'Space',
                preventDefault: jest.fn()
            };
            
            const enterEvent = {
                code: 'Enter',
                preventDefault: jest.fn()
            };
            
            const arrowEvent = {
                code: 'ArrowDown',
                preventDefault: jest.fn()
            };
            
            // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–ø—Ä—è–º—É—é
            keydownHandler(spaceEvent);
            expect(spaceEvent.preventDefault).toHaveBeenCalled();
            
            keydownHandler(enterEvent);
            expect(enterEvent.preventDefault).toHaveBeenCalled();
            
            keydownHandler(arrowEvent);
            expect(arrowEvent.preventDefault).not.toHaveBeenCalled();
        });
    });
}); 